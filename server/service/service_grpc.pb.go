// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContractService_ReadData_FullMethodName  = "/service.ContractService/ReadData"
	ContractService_SendFine_FullMethodName  = "/service.ContractService/SendFine"
	ContractService_BalanceOf_FullMethodName = "/service.ContractService/BalanceOf"
	ContractService_Mint_FullMethodName      = "/service.ContractService/Mint"
	ContractService_Transfer_FullMethodName  = "/service.ContractService/Transfer"
)

// ContractServiceClient is the client API for ContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractServiceClient interface {
	ReadData(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*UserResponse, error)
	SendFine(ctx context.Context, in *FineRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	BalanceOf(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	Mint(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	Transfer(ctx context.Context, in *TransferRequst, opts ...grpc.CallOption) (*ResultResponse, error)
}

type contractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractServiceClient(cc grpc.ClientConnInterface) ContractServiceClient {
	return &contractServiceClient{cc}
}

func (c *contractServiceClient) ReadData(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, ContractService_ReadData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) SendFine(ctx context.Context, in *FineRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, ContractService_SendFine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) BalanceOf(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, ContractService_BalanceOf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) Mint(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, ContractService_Mint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractServiceClient) Transfer(ctx context.Context, in *TransferRequst, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, ContractService_Transfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServiceServer is the server API for ContractService service.
// All implementations must embed UnimplementedContractServiceServer
// for forward compatibility.
type ContractServiceServer interface {
	ReadData(context.Context, *ReadRequest) (*UserResponse, error)
	SendFine(context.Context, *FineRequest) (*ResultResponse, error)
	BalanceOf(context.Context, *BalanceRequest) (*BalanceResponse, error)
	Mint(context.Context, *MintRequest) (*ResultResponse, error)
	Transfer(context.Context, *TransferRequst) (*ResultResponse, error)
	mustEmbedUnimplementedContractServiceServer()
}

// UnimplementedContractServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContractServiceServer struct{}

func (UnimplementedContractServiceServer) ReadData(context.Context, *ReadRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadData not implemented")
}
func (UnimplementedContractServiceServer) SendFine(context.Context, *FineRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFine not implemented")
}
func (UnimplementedContractServiceServer) BalanceOf(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOf not implemented")
}
func (UnimplementedContractServiceServer) Mint(context.Context, *MintRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (UnimplementedContractServiceServer) Transfer(context.Context, *TransferRequst) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedContractServiceServer) mustEmbedUnimplementedContractServiceServer() {}
func (UnimplementedContractServiceServer) testEmbeddedByValue()                         {}

// UnsafeContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractServiceServer will
// result in compilation errors.
type UnsafeContractServiceServer interface {
	mustEmbedUnimplementedContractServiceServer()
}

func RegisterContractServiceServer(s grpc.ServiceRegistrar, srv ContractServiceServer) {
	// If the following call pancis, it indicates UnimplementedContractServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContractService_ServiceDesc, srv)
}

func _ContractService_ReadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).ReadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_ReadData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).ReadData(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_SendFine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).SendFine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_SendFine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).SendFine(ctx, req.(*FineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_BalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).BalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_BalanceOf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).BalanceOf(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_Mint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).Mint(ctx, req.(*MintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractService_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServiceServer).Transfer(ctx, req.(*TransferRequst))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractService_ServiceDesc is the grpc.ServiceDesc for ContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ContractService",
	HandlerType: (*ContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadData",
			Handler:    _ContractService_ReadData_Handler,
		},
		{
			MethodName: "SendFine",
			Handler:    _ContractService_SendFine_Handler,
		},
		{
			MethodName: "BalanceOf",
			Handler:    _ContractService_BalanceOf_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _ContractService_Mint_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _ContractService_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
